extern crate bytes;
use bytes::BytesMut;

use std::io::Cursor;

use super::*;

const BUFFER_SIZE: usize = 128;

fn setup_header(header: &mut SmaDataHeader)
{
    header.dst.susy_id = 0xFFFF;
    header.dst.serial = 0xFFFFFFFF;
    header.packet_id = 0x8001;
    header.app.susy_id = 0x7800;
    header.app.serial = 0x50713a38;
}

#[test]
fn serialize_identify()
{
    let expected_binary: Vec<u8> = vec!
    [
        0x53, 0x4d, 0x41, 0x00, 0x00, 0x04, 0x02, 0xa0,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x26, 0x00, 0x10,
        0x60, 0x65, 0x09, 0xa0, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0x00, 0x00, 0x78, 0x00, 0x50, 0x71,
        0x3a, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x80, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        // TODO: are those 0x00 necessary?
        0x00, 0x00, 0x00, 0x00
    ];
    let mut buffer = BytesMut::with_capacity(BUFFER_SIZE);
    let mut cmd = SmaCmdIdentify::new();
    setup_header(&mut cmd.data_header);
    cmd.serialize(&mut buffer);

    assert_eq!(expected_binary, buffer.to_vec(),
        "Identify serialized incorrectly");
}

#[test]
fn dererialize_identify()
{
    let mut input_buffer = Cursor::new(vec!
    [
        0x53, 0x4d, 0x41, 0x00, 0x00, 0x04, 0x02, 0xa0,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x4e, 0x00, 0x10,
        0x60, 0x65, 0x13, 0x90, 0x7d, 0x00, 0xeb, 0x7b,
        0xb8, 0x33, 0x00, 0x00, 0x8a, 0x00, 0xd5, 0x66,
        0xfb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x80, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
        0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xd4, 0x73,
        0x00, 0x20, 0x01, 0x00, 0x8a, 0x00, 0xd5, 0x66,
        0xfb, 0x7e, 0x00, 0x00, 0x0a, 0x00, 0x0c, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00
    ]);
    let response = parse_command(&mut input_buffer);
    let response = match response
    {
        Err(e) => panic!("Parse identify response failed: {}", e),
        Ok(x) => x
    };
    let parsed_endpoint = match response.extract_data()
    {
        SmaData::Endpoint(ep) => ep,
        _ => panic!("Extracted incorrect data from idnetify response")
    };

    assert_eq!(parsed_endpoint.susy_id, 0x8a00, "wrong susy_id");
    assert_eq!(parsed_endpoint.serial, 0xd566fb7e, "wrong serial");
    assert_eq!(parsed_endpoint.ctrl, 0x00, "wrong ctrl");
}

#[test]
fn serialize_login()
{
    let expected_binary: Vec<u8> = vec!
    [
        0x53, 0x4d, 0x41, 0x00, 0x00, 0x04, 0x02, 0xa0,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x3a, 0x00, 0x10,
        0x60, 0x65, 0x0e, 0xa0, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0x00, 0x01, 0x78, 0x00, 0x50, 0x71,
        0x3a, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x80, 0x0c, 0x04, 0xfd, 0xff, 0x07, 0x00,
        0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0xfc, 0xd4,
        0xba, 0x5c, 0x00, 0x00, 0x00, 0x00, 0xb8, 0xb8,
        0xb8, 0xb8, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,
        0x88, 0x88, 0x00, 0x00, 0x00, 0x00
    ];
    let mut buffer = BytesMut::with_capacity(BUFFER_SIZE);
    let mut cmd = SmaCmdLogin::new();
    setup_header(&mut cmd.data_header);
    cmd.set_password(&"0000".to_string());
    cmd.timestamp = 0x5cbad4fc;
    cmd.serialize(&mut buffer);

    assert_eq!(expected_binary, buffer.to_vec());
}

#[test]
fn serialize_logout()
{
    let expected_binary: Vec<u8> = vec!
    [
        0x53, 0x4d, 0x41, 0x00, 0x00, 0x04, 0x02, 0xa0,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x22, 0x00, 0x10,
        0x60, 0x65, 0x08, 0xa0, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0x00, 0x03, 0x78, 0x00, 0x50, 0x71,
        0x3a, 0x38, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x80, 0x0e, 0x01, 0xfd, 0xff, 0xff, 0xff,
        0xff, 0xff, 0x00, 0x00, 0x00, 0x00
    ];
    let mut buffer = BytesMut::with_capacity(BUFFER_SIZE);
    let mut cmd = SmaCmdLogout::new();
    setup_header(&mut cmd.data_header);
    cmd.serialize(&mut buffer);

    assert_eq!(expected_binary, buffer.to_vec());
}

#[test]
fn serialize_get_day_data()
{
    let expected_binary: Vec<u8> = vec!
    [
        0x53, 0x4d, 0x41, 0x00, 0x00, 0x04, 0x02, 0xa0,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x26, 0x00, 0x10,
        0x60, 0x65, 0x09, 0xe0, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0x00, 0x00, 0x78, 0x00, 0x50, 0x71,
        0x3a, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x80, 0x00, 0x02, 0x00, 0x70, 0xb4, 0xb8,
        0xcc, 0x5c, 0x34, 0x0a, 0xce, 0x5c, 0x00, 0x00,
        0x00, 0x00
    ];
    let mut buffer = BytesMut::with_capacity(BUFFER_SIZE);
    let mut cmd = SmaCmdGetDayData::new();
    setup_header(&mut cmd.data_header);
    cmd.start_time = 0x5cccb8b4;
    cmd.end_time = 0x5cce0a34;
    cmd.serialize(&mut buffer);

    assert_eq!(expected_binary, buffer.to_vec());
}
